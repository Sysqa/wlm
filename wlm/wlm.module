<?php

/**
 * @file
 * Searching and monitoring the collected server logs.
 *
 *
 * Web Log Monitor
 * Created/Modified on 2006.01.10./2013.04.10.
 * Modified by Sysqa
 */

/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
// function wlm_help($path, $arg) {
// 	$output = '';
// 	switch ($path) {
// 	case "admin/help#wlm":
// 		$output = t("Web Log Monitor");
// 		break;
// 	}
// 	return $output;
// } // function wlm_help()

/**
 * Implementation of hook_init().
 * Connect the external database.
 */
function wlm_init() {
	$wlm_database = array(
    'database' => variable_get('wlm_db'),
    'username' => variable_get('wlm_user'),
    'password' => variable_get('wlm_pwd'),
    'host' => variable_get('wlm_server'),
    'port' => variable_get('wlm_port'),
    'driver' => variable_get('wlm_server_type'),
  );
  Database::addConnectionInfo('wlm', 'default', $wlm_database);
} // function wlm_init

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the wlm module
 */
function wlm_permission() {
	return array(
    'access wlm' => array(
      'title' => t('Access the WLM module'),
    ),
    'create wlm' => array(
      'title' => t('Create WLM'),
    ),
    'administer wlm' => array(
      'title' => t('Administer the WLM module'),
    ),
  );
} // function wlm_perm()

/**
 * Implements hook_menu().
 * @return the menu items.
 */
function wlm_menu() {
	$items = array();

  // Administrator menus, System admin
	$items['admin/config/sysadmin/wlm'] = array(
		'title' => 'Web Log Monitor settings',
    'description' => 'Configure Web Log Monitor settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wlm_settings'),
    'access arguments' => array('administer wlm'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wlm.admin.inc',
	);

	$items['wlm'] = array(
		'title' => 'Web Log Monitor',
		'page callback' => 'wlm_all',
		'access arguments' => array('access wlm'),
		'weight' => 1,
	);

	$items['wlm/autolog'] = array(
		'title' => 'Auto Log',
		'page callback' => 'wlm_autolog_page',
		'access arguments' => array('access wlm'),
		'weight' => 1,
	);

	$items['wlm/search'] = array(
		'title' => 'Search',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wlm_search_page'),
		'access arguments' => array('access wlm'),
		'weight' => 1,
	);

	$items['wlm/log'] = array(
		'title' => 'Log',
		'page callback' => 'wlm_log',
		'access arguments' => array('access wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
	);

	$items['wlm/template'] = array(
		'title' => 'Search template',
		'page callback' => 'wlm_template',
		'access arguments' => array('create wlm'),
		'weight' => 1,
	);

	$items['wlm/template/add'] = array(
		'title' => 'Add serach template',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wlm_template_add'),
		'access arguments' => array('create wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
	);

	$items['wlm/template/edit/%'] = array(
		'title' => 'Edit serach template',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wlm_template_edit', 3),
		'access arguments' => array('create wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
	);

	$items['wlm/template/delete/%'] = array(
		'title' => 'Delete serach template',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wlm_template_delete_confirm', 3),
		'access arguments' => array('create wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
	);

	$items['wlm/oldlogsearch'] = array(
		'title' => 'Old Logs Search',
		'page callback' => 'wlm_oldlogsearch',
		'access arguments' => array('access wlm'),
		'weight' => 1,
	);

	$items['wlm/oldlogsearch/%'] = array(
		'title' => 'Old Logs Search',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wlm_oldlogsearch_form', 2),
		'access arguments' => array('access wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
	);

	$items['wlm/oldlog'] = array(
		'title' => 'Old Logs',
		'page callback' => 'wlm_oldlog',
		'access arguments' => array('access wlm'),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'weight' => 1,
		);
	return $items;
} // function wlm_menu()

/**
 * Implementation of hook_theme()
 */
function wlm_theme($existing, $type, $theme, $path) {
	return array(
		'wlm_all' => array(
			'variables' => array(),
		),
		'wlm_autolog' => array(
			'variables' => array(
				'form' => NULL,
				'rows' => NULL,
				'refresh' => NULL,
			),
		),
		'wlm_log' => array(
			'variables' => array(
				'rows' => NULL,
				'log_per_page' => NULL,
				'format' => NULL,
			),
		),
		'wlm_template' => array(
			'variables' => array(
				'rows' => NULL,
			),
		),
		'wlm_oldlogsearch' => array(
			'variables' => array(
				'dbs' => NULL,
			),
		),
	);
} // function wlm_theme

/**
 * Roviden mit tudnak a menuk.
 */
function wlm_all() {
	return theme('wlm_all');
} // function wlm_all()

function theme_wlm_all() {
	$output = '<dl>';
	$output .= '<dt>'.l(t('Auto Log'), 'wlm/autolog').':</dt>';
	$output .= '<dd>'.t('Automatic log viewer...').'</dd>';
	$output .= '<dt>'.l(t('Search'), 'wlm/search').':</dt>';
	$output .= '<dd>'.t('Search syslog...').'</dd>';
	$output .= '<dt>'.l(t('Old logs search'), 'wlm/oldlogsearch').':</dt>';
	$output .= '<dd>'.t('Search old syslog...').'</dd>';
	$output .= '<dt>'.l(t('Search template'), 'wlm/template').':</dt>';
	$output .= '<dd>'.t('Use and create search template...').'</dd>';
	$output .= '</dl>';

	return $output;
} // function theme_wlm_all()

/**
 * _wlm_get_form:
 * @param $form_values - tartalmazza a form mezok ertekeit
 * @param $def - tartalmazza a form alapertelmezett ertekeit
 * @return form valtozot adja vissza
 */
function _wlm_get_form($form_values, $def) {
	$form['log'] = array(
		'#type' => 'fieldset',
		'#title' => t('Log Type').':',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#prefix' => '<div id="wlm-select">',
		'#suffix' => '</div>',
	);
	$form['log']['host'] = array(
		'#type' => 'select',
		'#title' => t('Host'),
		'#default_value' => $def['host'],
		'#options' => $form_values['host'],
		'#multiple' => TRUE,
		'#required' => FALSE,
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);

	$form['log']['facility'	] = array(
		'#type' => 'select',
		'#title' => t('Facility'),
		'#default_value' => $def['facility'],
		'#options' => $form_values['facility'],
		'#multiple' => TRUE,
		'#required' => FALSE,
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);
	$form['log']['priority'] = array(
		'#type' => 'select',
		'#title' => t('Priority'),
		'#default_value' => $def['priority'],
		'#options' => $form_values['priority'],
		'#multiple' => TRUE,
		'#required' => FALSE,
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);

	$form['dates'] = array(
		'#type' => 'fieldset',
		'#title' => t('Date'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#prefix' => '<div id="wlm-dates">',
		'#suffix' => '</div>',
	);
	$form['dates']['date'] = array(
		'#type' => 'select',
		'#title' => t('Date'),
		'#default_value' => $def['date'],
		'#options' => $form_values['date'],
		'#prefix' => '<div class="wlm-date1">',
		'#suffix' => '<span class="sep"> - </span></div> ',
	);
	$form['dates']['date2'] = array(
		'#type' => 'select',
		'#default_value' => $def['date2'],
		'#options' => $form_values['date'],
		'#prefix' => '<div class="wlm-date2">',
		'#suffix' => '</div>',
	);
	$form['dates']['time'] = array(
		'#type' => 'select',
		'#title' => t('Time'),
		'#default_value' => $def['time'],
		'#options' => $form_values['times'],
		'#prefix' => '<div class="wlm-date1">',
		'#suffix' => '<span class="sep"> - </span></div> ',
	);
	$form['dates']['time2'] = array(
		'#type' => 'select',
		'#default_value' => $def['time2'],
		'#options' => $form_values['times'],
		'#prefix' => '<div class="wlm-date2">',
		'#suffix' => '</div>',
	);

	$form['txt'] = array(
		'#type' => 'fieldset',
		'#title' => t('Search message').':',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#prefix' => '<div id="wlm-txt">',
		'#suffix' => '</div>',
	);
	$form['txt']['msg1_not'] = array(
		'#type' => 'checkbox',
		'#default_value' => $def['msg1_not'],
		'#title' => t('Not'),
		'#prefix' => '<div class="wlm-line">',
	);
	$form['txt']['msg1'] = array(
		'#type' => 'textfield',
		'#default_value' => $def['msg1'],
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => FALSE,
	);
	$form['txt']['msg2_op'] = array(
		'#type' => 'radios',
		'#default_value' => $def['msg2_op'],
		'#options' => $form_values['chk_opt'],
		'#suffix' => '</div>',
	);
	$form['txt']['msg2_not'] = array(
		'#type' => 'checkbox',
		'#default_value' => $def['msg2_not'],
		'#title' => t('Not'),
		'#prefix' => '<div class="wlm-line">',
	);
	$form['txt']['msg2'] = array(
		'#type' => 'textfield',
		'#default_value' => $def['msg2'],
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => FALSE,
	);
	$form['txt']['msg3_op'] = array(
		'#type' => 'radios',
		'#default_value' => $def['msg3_op'],
		'#options' => $form_values['chk_opt'],
		'#suffix' => '</div>',
	);
	$form['txt']['msg3_not'] = array(
		'#type' => 'checkbox',
		'#default_value' => $def['msg3_not'],
		'#title' => t('Not'),
		'#prefix' => '<div class="wlm-line">',
	);
	$form['txt']['msg3'] = array(
		'#type' => 'textfield',
		'#default_value' => $def['msg3'],
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => FALSE,
		'#suffix' => '</div>',
	);

	$form['other'] = array(
		'#type' => 'fieldset',
		'#title' => t('Other').':',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#prefix' => '<div id="wlm-other">',
		'#suffix' => '</div>',
	);
	$form['other']['limit'] = array(
		'#type' => 'select',
		'#title' => t('Records per page'),
		'#default_value' => $def['limit'],
		'#options' => $form_values['limits'],
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);
	$form['other']['orderby'] = array(
		'#type' => 'select',
		'#title' => t('Search order'),
		'#default_value' => $def['orderby'],
		'#options' => $form_values['orderby'],
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);
	$form['other']['format'] = array(
		'#type' => 'select',
		'#title' => t('Format'),
		'#default_value' => $def['format'],
		'#options' => $form_values['format'],
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div>',
	);
	return $form;
} // function _wlm_get_form()

/**
 * _wlm_get_link: Kitoltott form parametereibol linket keszit
 * @param $def - alapertelmezett form ertekek
 * @param $values - form altal atadott ertekek
 * @return $link - a form ertekeibol keszitett linket adja vissza
 */
function _wlm_get_link($def, $values) {
	// alapertelmezettol eltero ertekbol csinal linket
	$link = '';
	$keys = array("host", "facility", "priority", "date", "date2", "time", "time2",
								"msg1_not", "msg1", "msg2_op", "msg2_not", "msg2", "msg3_op", "msg3_not", "msg3",
								"limit", "orderby", "format");
	foreach ($keys as $key) {
		if ( is_array($values[$key]) ) {
			if ( !(($values[$key][0] == '*') || ($values[$key][0] == 'all')) && ($values[$key] != '') ) {
				$link .= '/' . $key . '|' . implode('+', $values[$key]);
			}
		} else {
			if ( ($def[$key] != $values[$key]) && ($values[$key] != '') ) {
				$link .= '/'.$key.'|'.$values[$key];
			}
		}
	}
	return $link;
} // function _wlm_get_link()


function _wlm_date_change($date) {
	if ($date == 'today') {
		$date = date("Y-m-d");
	} elseif ($date < 0) {
		$date = date("Y-m-d", strtotime($date." day"));
	}
	return $date;
}

/**
 * wlm_template: Kereses minta/sablon menu
 */
function wlm_template() {
	global $user;

	$def = _wlm_get_default();
	$admin = user_access('administer wlm');
	$rows = array();

	$query = db_select('wlm_search_template', 'w');
  $query->join('users', 'u', 'w.uid = u.uid');
  $query
    ->fields('w', array('wid', 'label', 'action', 'public'))
    ->fields('u', array('name'))
    ->condition(db_or()->condition('w.public', 1)->condition('w.uid', $user->uid))
    ->orderBy('w.label');
  $result = $query->execute();

  foreach ($result as $row) {
  	if ($row->public) {
			$public = t('Yes');
		} else {
			$public = t('No');
		}
		$action = unserialize($row->action);
		if ($action['date'] != '') {
			$action['date'] = _wlm_date_change($action['date']);
		}
		if ($action['date2'] != '') {
			$action['date2'] = _wlm_date_change($action['date2']);
		}
		$link = _wlm_get_link($def, $action);

		$acces = 0;
		if ($admin) {
			$acces = 1;
		} elseif ($user->name == $row->name) {
			$acces = 1;
		}

		$rows[] = array(
			array('data' => l($row->label, 'wlm/search'.$link), 'class' => 'wlm_label'),
			array('data' => $row->name, 'class' => 'wlm_user'),
			array('data' => $public, 'class' => 'wlm_public'),
			array('data' => l(t('search'), 'wlm/search'.$link), 'class' => 'wlm_view'),
			array('data' => $acces ? l(t('edit'), 'wlm/template/edit/'.$row->wid) : '', 'class' => 'wlm_edit'),
			array('data' => $acces ? l(t('delete'), 'wlm/template/delete/'.$row->wid) : '', 'class' => 'wlm_del'),
		);
	}
	$build['wlm_template'] = array(
	  '#theme' => 'wlm_template',
	  '#rows' => $rows,
	);
	return $build;
} // function wlm_template()

/**
 * theme_wlm_template: Kereses sablon kiiratasa
 */
function theme_wlm_template($variables) {
	$rows = $variables['rows'];
	$output = '';

	$output .= '<ul>';
	$output .= ' <li>'. l(t('Create new search template.'), "wlm/template/add") .'</li>';
	$output .= '</ul>';
	$output .= '<div id="wlm_template">';
	$header = array(
		array('data' => t('Label')),
		array('data' => t('User')),
		array('data' => t('Public')),
		array('data' => t('Operations'), 'colspan' => '3'),
	);
	$output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No content available.')));
	$output .= '</div>';
	return $output;
}  // function theme_wlm_template()

/**
 * wlm_autolog_page: autmatikus log kiiratas
 */
function wlm_autolog_page() {
	$links = func_get_args();
	$rows = array();

	$def['host'] = 'all';	$def['facility'] = 'all';	$def['rtime'] = '60';	$def['limit'] = '25';
		$refresh = 0;

	if (count($links)) {
		$def = _wlm_get_default($links, $def);
		$refresh = $def['rtime'];
	}

	if ($refresh) {
		$params = array();

		// Kapcsolodas az SQL szerverhez
		db_set_active('wlm');

		$query = db_select('logs', 'l')->fields('l');

		if ( ($def['host'] != 'all') || ($def['facility'] != 'all') ) {
			if ($def['host'] != 'all') {
				if ( is_array($def['host']) ) {
					$db_or = db_or();
					foreach ($def['host'] as $element) {
						$db_or->condition('host', $element);
					}
					$query->condition($db_or);
				} else {
					$query->condition('host', $def['host']);
				}
			}
			if ($def['facility'] != 'all') {
				if ( is_array($def['facility']) ) {
					$db_or = db_or();
					foreach ($def['facility'] as $element) {
						$db_or->condition('facility', $element);
					}
					$query->condition($db_or);
				} else {
					$query->condition('facility', $def['facility']);
				}
			}
		}

		$query->orderBy('seq', 'DESC');
		$result = $query->execute();

		// Vissza valtas az alapertelmezett SQL szerverhez
		db_set_active();

		foreach ($result as $row) {
			$rows[] = array(
				array('data' => $row->seq, 'class' => 'wlm_seq'),
				array('data' => $row->host, 'class' => 'wlm_host'),
				array('data' => $row->priority, 'class' => 'wlm_priority_'.$row['priority']),
				array('data' => $row->date.' '.$row->time, 'class' => 'wlm_date'),
				array('data' => $row->facility, 'class' => 'wlm_facility'),
				array('data' => htmlspecialchars($row->msg, ENT_QUOTES, 'UTF-8'), 'class' => 'wlm_msg1'),
			);
		}
	} else {
		$rows = '';
	}

	$build['wlm_autolog_page'] = array(
	  '#theme' => 'wlm_autolog',
	  '#rows' => $rows,
	  '#refresh' => $refresh,
	  '#form' => drupal_get_form('wlm_autolog_form', $def, $refresh),
	);
	return $build;
} // function wlm_autolog_page()

/**
 * theme_wlm_autolog: autolog oldal kenezetet adja meg
 * @param $form - kiirando form
 * @param $rows - tablazat sorai
 * @param $refresh - 0/1 ha volt frissites akkor: 1
 */
function theme_wlm_autolog($variables) {
	$rows = $variables['rows'];
	$refresh = $variables['refresh'];
	$form = $variables['form'];

	$output = '';
	$output .= drupal_render($form);
	if ($refresh) {
		drupal_add_http_header('Refresh', $refresh.';');

		$output .= '<div id="wlm_log">';

		$header = array(
			array('data' => t('Seq')),
			array('data' => t('Host')),
			array('data' => t('Priority')),
			array('data' => t('Date')),
			array('data' => t('Facility')),
			array('data' => t('Message')),
		);

		$output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No content available.')));

		$output .= '</div>';
	}

	return $output;
} // function wlm_autolog_page()

/**
 * wlm_autolog_form: autmatikus log kiiratas form
 */
function wlm_autolog_form($form, &$form_state, $def, $refresh) {
	// Kapcsolodas az SQL szerverhez
	db_set_active('wlm');

	$query = db_select('cache', 'c');
  $query
    ->fields('c')
    ->condition(db_or()->condition('id', 'host')->condition('id', 'facility'))
    ->orderBy('value', 'ASC');
  $result = $query->execute();

	// Vissza valtas az alapertelmezett SQL szerverhez
	db_set_active();

	$form_values['host']['all'] = t('All');
	$form_values['facility']['all'] = t('All');
	foreach ($result as $row) {
		$form_values[$row->id][$row->value] = $row->value;
	}

	$form['auto'] = array(
		'#type' => 'fieldset',
		'#title' => t('Auto Log Settings'),
		'#collapsible' => TRUE,
		'#collapsed' => $refresh,
		'#prefix' => '',
		'#suffix' => '',
	);
	$form['auto']['host'] = array(
		'#type' => 'select',
		'#title' => t('Host'),
		'#default_value' => $def['host'],
		'#options' => $form_values['host'],
		'#multiple' => TRUE,
		'#required' => FALSE,
		'#prefix' => '<div id="wlm-select"><div class="wlm-left">',
		'#suffix' => '</div>',
	);

	$form['auto']['facility'] = array(
		'#type' => 'select',
		'#title' => t('Facility'),
		'#default_value' => $def['facility'],
		'#options' => $form_values['facility'],
		'#multiple' => TRUE,
		'#required' => FALSE,
		'#prefix' => '<div class="wlm-left">',
		'#suffix' => '</div></div>',
	);

	$form_values['rtime']['30'] = '0.5 '.t('Minute');	$form_values['rtime']['60'] = '01 '.t('minute');
	$form_values['rtime']['120'] = '02 '.t('minute');	$form_values['rtime']['300'] = '05 '.t('minute');
	$form_values['rtime']['300'] = '10 '.t('minute');	$form_values['rtime']['600'] = '20 '.t('minute');
	$form['auto']['rtime'] = array(
		'#type' => 'select',
		'#title' => t('Refresh Time'),
		'#default_value' => $def['rtime'],
		'#options' => $form_values['rtime'],
		'#required' => FALSE,
	);

	$form_values['limit'] = array(25 => 25, 50 => 50, 100 => 100, 250 => 250);
	$form['auto']['limit'] = array(
		'#type' => 'select',
		'#title' => t('Records per page'),
		'#default_value' => $def['limit'],
		'#options' => $form_values['limit'],
		'#required' => FALSE,
	);

	$form['submit'] = array('#type' => 'submit', '#value' => t('Refresh'));

	return $form;
} // function wlm_autolog_form()

/**
 * wlm_autolog_form_submit: autolog submit hook
 */
function wlm_autolog_form_submit($form, &$form_state) {
	if ($form_state['values']['host'] != '') {
		$def = array();
		$form_state['redirect'] = 'wlm/autolog'._wlm_get_link($def, $form_state['values']);
	}
} // function wlm_autolog_form_submit()

/**
 * wlm_search_page: Log kereses form kiiratasa.
 */
function wlm_search_page($form, &$form_state) {

	$links = $form_state['build_info']['args'];

	// Kapcsolodas az SQL szerverhez
	db_set_active('wlm');

	$query = db_select('cache', 'c');
  $query
    ->fields('c')
    ->orderBy('value', 'ASC');
  $result = $query->execute();

	// Vissza valtas az alapertelmezett SQL szerverhez
	db_set_active();

	$form_values['host']['*'] = $form_values['facility']['*'] = t('All');
	$form_values['priority']['*'] = $form_values['date']['*'] = t('All');

	foreach ($result as $row) {
		$form_values[$row->id][$row->value] = $row->value;
	}

	array_multisort($form_values['date'], SORT_DESC);

	$def = _wlm_get_default($links);

	$form_values['times']['*'] = t('All');
	for ($i = 0; $i < 24; $i++) {
		if ($i < 10) {
			$form_values['times']['0'.$i] = '0'.$i.':00';
		} else {
			$form_values['times'][$i] = $i.':00';
		}
	}

	$form_values['chk_opt'] = array('0' => t('And'), '1' => t('Or'));

	$form_values['limits'] = array(25 => 25, 50 => 50, 100 => 100, 250 => 250, 500 => 500, 1000 => 1000);

	$form_values['orderby']['ASC'] = t('ASC');	$form_values['orderby']['DESC'] = t('DESC');
	$form_values['format'] = array(t("Wrap On"), t("Wrap Off"), t("Text Mode"));

	$form = _wlm_get_form($form_values, $def);
	$form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

	return $form;
}  // function wlm_search_page()

/**
 * wlm_search_page_submit: Kereses, atdobb a kereses oldalra.
 */
function wlm_search_page_submit($form, &$form_state) {
	if ($form_state['values']['host'] != '') {
		$def = _wlm_get_default();
		$form_state['redirect'] = 'wlm/log'._wlm_get_link($def, $form_state['values']);
	}
}  // function wlm_search_page_submit()

/**
 * wlm_log: kereses eredmenyet keszit elo kiiratasra.
 */
function wlm_log() {
	$links = func_get_args();
	$action = _wlm_get_default($links);

	if ( ($action['host'] != '') && (count($links)) ) {
		$bc = drupal_get_breadcrumb();
		$bc[] = l( t('Search'), 'wlm/search'.substr($_GET['q'], 7) );
		drupal_set_breadcrumb($bc);

		$result = _wlm_url2sql($action, 'logs');

		foreach ($result as $row) {
			$rows[] = array(
				array('data' => $row->seq, 'class' => 'wlm_seq'),
				array('data' => $row->host, 'class' => 'wlm_host'),
				array('data' => $row->priority, 'class' => 'wlm_priority_'.$row->priority),
				array('data' => $row->date.' '.$row->time, 'class' => 'wlm_date'),
				array('data' => $row->facility, 'class' => 'wlm_facility'),
				array('data' => htmlspecialchars($row->msg, ENT_QUOTES, 'UTF-8'), 'class' => 'wlm_msg'.$action['format']),
			);
		}

		$build['wlm_log'] = array(
		  '#theme' => 'wlm_log',
		  '#rows' => $rows,
		  '#log_per_page' => $action['limit'],
		  '#format' => $action['format'],
		);
		return $build;
	} else {
		$form_state['redirect'] = 'wlm/search';
	}
}  // function wlm_log()

/**
 * theme_wlm_log: Logok kiiratasa
 */
function theme_wlm_log($variables) {
	$rows = $variables['rows'];
	$log_per_page = $variables['log_per_page'];
	$format = $variables['format'];

	$output = '';
	$output .= '<div id="wlm_log">';
	$header = array(
		array('data' => t('Seq')),
		array('data' => t('Host')),
		array('data' => t('Priority')),
		array('data' => t('Date')),
		array('data' => t('Facility')),
		array('data' => t('Message')),
	);
	$output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No content available.')));
	$output .= '</div>';
	$output .= theme('pager');
	return $output;
}  // function theme_wlm_log()

/**
 * _wlm_url2sql: atadott parameterekbol SQL feltetelt keszit
 * @param $url - linkbol generalt valtozo
 * @return sql feltetel
 */
function _wlm_url2sql($url, $db_name) {

	// Kapcsolodas az SQL szerverhez
	db_set_active('wlm');

	$query = db_select($db_name, 'l')
		->extend('PagerDefault')
		->fields('l');

	$list = array('host', 'facility', 'priority');
	foreach ($list as $key) {
		if ( is_array($url[$key]) ) {
			$db_or = db_or();
			foreach ($url[$key] as $element) {
				$db_or->condition($key, $element);
			}
			$query->condition($db_or);
		} elseif ( ($url[$key] != '') && ($url[$key] != '*') ) {
			$query->condition($key, $url[$key]);
		}
	}

	if ($url['date'] != '*') {
		if ($url['date2'] == '*') {
			$query->condition('date', $url['date']);
		} else {
			if ($url['date'] > $url['date2']) {
				//	Datum csere
				$tmp = $url['date'];
				$url['date'] = $url['date2'];
				$url['date2'] = $tmp;
			}
			$query->condition('date', $url['date'], '>=');
			$query->condition('date', $url['date2'], '<=');
		}
	}

	if ($url['time'] != '*') {
		if ($url['time2'] == '*') {
			$query->where('HOUR(time) = :time', array(':time' => $url['time'].':00'));
		} else {
			if ($url['time'] > $url['time2']) {
				//	Datum csere
				$tmp = $url['time'];
				$url['time'] = $url['time2'];
				$url['time2'] = $tmp;
			}
			$query->where('HOUR(time) BETWEEN :time AND :time2', array(':time' => $url['time'].':00', ':time2' => $url['time2'].':00'));
		}
	}

	$SQL = '';
	$params = array();
	if ($url['msg1'] != '') {
		if ($url['msg1_not']) {
			$msg_not = ' NOT ';
		} else {
			$msg_not = '';
		}
		$SQL .= '((msg '.$msg_not." LIKE :msg1)";
		$params[':msg1'] = '%'.$url['msg1'].'%';

		if ($url['msg2'] != '') {
			if ($url['msg2_not']) {
				$msg_not = ' NOT ';
			} else {
				$msg_not = '';
			}

			if ($url['msg2_op']) {
				$msg_op = ' OR ';
			} else {
				$msg_op = ' AND ';
			}
			$SQL .= $msg_op.'(msg '.$msg_not." LIKE :msg2)";
			$params[':msg2'] = '%'.$url['msg2'].'%';

			if ($url['msg3'] != '') {
				if ($url['msg3_not']) {
					$msg_not = ' NOT ';
				} else {
					$msg_not = '';
				}

				if ($url['msg3_op']) {
					$msg_op = ' OR ';
				} else {
					$msg_op = ' AND ';
				}
				$SQL .= $msg_op.'(msg '.$msg_not." LIKE :msg3)";
				$params['msg3'] = '%'.$url['msg3'].'%';
			}
		}
		$SQL .= ')';
		$query->where($SQL, $params);
	}

	$query
		->limit($url['limit'])
		->orderBy('seq', $url['orderby']);
	$result = $query->execute();

	// Vissza valtas az alapertelmezett SQL szerverhez
	db_set_active();

	return $result;
} // function _wlm_url2sql()

/**
 * _wlm_get_default:
 * @param $links - modositja az alapertelmezett ertekeket
 * @param $def - alapertelmezett ertek megadasa, ha elter a megszokottol
 * @return form alapertelmezett elemeit adja vissza
 */
function _wlm_get_default($links = array(), $def = array()) {
	if (!count($def)) {
		$def['host'] = '*';	$def['facility'] = '*';	$def['priority'] = '*';
		$def['date'] = '*';	$def['date2'] = '*';	$def['time'] = '*';	$def['time2'] = '*';
		$def['msg1_not'] = '0';	$def['msg1'] = '';	$def['msg2_op'] = '0';
		$def['msg2_not'] = '0';	$def['msg2'] = '';	$def['msg3_op'] = '0';
		$def['msg3_not'] = '0';	$def['msg3'] = '';
		$def['limit'] = '100';	$def['orderby'] = 'DESC';	$def['format'] = '1';
	}
	// Alapertelemezett ertekek felul irasa a link parameter alapjan.
	if (count($links)) {
		$prev_key = '';
		foreach ($links as $value) {
			if ( strpos($value, '|') ) {
				list($key, $link) = explode('|', $value);
				if ( strpos($link, '+') ) {
					$link = explode('+', $link);
				}
				$def[$key] = $link;
				$prev_key = $key;
			} else {
				 $def[$prev_key] .= '/'.$value;
			}
		}
	}
	return $def;
} // function _wlm_get_default()


/**
 * wlm_template_add: Kereses sablon hozza adasa
 */
function wlm_template_add($form, &$form_state) {

	// Kapcsolodas az SQL szerverhez
	db_set_active('wlm');

	$query = db_select('cache', 'c');
  $query
    ->fields('c')
    ->condition('id', 'date', '!=')
    ->orderBy('value', 'ASC');
  $result = $query->execute();

	// // Vissza valtas az alapertelmezett SQL szerverhez
	db_set_active();

	$form_values['host']['*'] = $form_values['facility']['*'] = t('All');
	$form_values['priority']['*'] = $form_values['date']['*'] = t('All');
	$form_values['date']["today"] = t('Today');
	foreach ($result as $row) {
		$form_values[$row->id][$row->value] = $row->value;
	}


	for ($i = -1; $i >= -31; $i--) {
		$form_values['date'][$i] = $i.' '.t('Day');
	}

	$def = _wlm_get_default();

	$form_values['times']['*'] = t('All');
	for ($i = 0; $i < 24; $i++) {
		if ($i < 10) {
			$form_values['times']['0'.$i] = '0'.$i.':00';
		} else {
			$form_values['times'][$i] = $i.':00';
		}
	}

	$form_values['chk_opt'] = array('0' => t('And'), '1' => t('Or'));

	$form_values['limits'] = array(25 => 25, 50 => 50, 100 => 100, 250 => 250, 500 => 500, 1000 => 1000);

	$form_values['orderby']['ASC'] = t('ASC');	$form_values['orderby']['DESC'] = t('DESC');
	$form_values['format'] = array(t("Wrap On"), t("Wrap Off"), t("Text Mode"));

	$form['desc'] = array(
		'#type' => 'fieldset',
		'#title' => t('Label').':',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#prefix' => '<div id="wlm-label">',
		'#suffix' => '</div>',
	);
	$form['desc']['label'] = array(
		'#type' => 'textfield',
		'#default_value' => $def['label'],
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => TRUE,
	);

	$form = array_merge($form, _wlm_get_form($form_values, $def));
	if (user_access('administer wlm')) {
		$form['other']['public'] = array(
			'#type' => 'select',
			'#title' => t('Public'),
			'#default_value' => '',
			'#options' => array( t('No'), t('Yes') ),
			'#prefix' => '<div class="wlm-left">',
			'#suffix' => '</div>',
		);
	}
	$form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

	return $form;
} // function wlm_template_add()

/**
 * wlm_template_add_submit: Kereses sablon adatbazisba felvitele
 */
function wlm_template_add_submit($form, &$form_state) {
	global $user;

	$def = _wlm_get_default();

	$keys = array("host", "facility", "priority", "date", "date2", "time", "time2",
								"msg1_not", "msg1", "msg2_op", "msg2_not", "msg2", "msg3_op", "msg3_not", "msg3",
								"limit", "orderby", "format");
	foreach ($keys as $key) {
		if ($def[$key] != $form_state['values'][$key]) {
			$action[$key] = $form_state['values'][$key];
		}
	}

	if (!user_access('administer wlm')) {
		$form_state['values']['public'] = 0;
	}

	db_insert('wlm_search_template')
	  ->fields(array(
	    'uid' => $user->uid,
	    'label' => $form_state['values']['label'],
	    'action' => serialize($action),
	    'public' => $form_state['values']['public'],
	  ))
	  ->execute();

	$form_state['redirect'] = 'wlm/template';
}  // function wlm_template_add_submit()

/**
 * wlm_template_edit: Kereses sablon szerkesztese
 * @param $wid template azonositoja
 */
function wlm_template_edit($form, &$form_state, $wid) {
	global $user;

	if (user_access('administer wlm')) {
		$query = db_select('wlm_search_template', 'w');
		$query
		  ->fields('w', array('label', 'action', 'public'))
		  ->condition('wid', $wid);
		$result = $query->execute();
	} else {
		$query = db_select('wlm_search_template', 'w');
		$query
		  ->fields('w', array('label', 'action', 'public'))
		  ->condition('uid', $user->uid)
		  ->condition('wid', $wid);
		$result = $query->execute();
	}

	if ($line = $result->fetchAssoc()) {
		// Kapcsolodas az SQL szerverhez
		db_set_active('wlm');

		$query = db_select('cache', 'c');
		$query
		  ->fields('c')
		  ->condition('id', 'date', '!=')
		  ->orderBy('value', 'ASC');
		$result = $query->execute();

		// Vissza valtas az alapertelmezett SQL szerverhez
		db_set_active();

		$form_values['host']['*'] = $form_values['facility']['*'] = t('All');
		$form_values['priority']['*'] = $form_values['date']['*'] = t('All');
		$form_values['date']["today"] = t('Today');
		foreach ($result as $row) {
			$form_values[$row->id][$row->value] = $row->value;
		}

		for ($i = -1; $i >= -31; $i--) {
			$form_values['date'][$i] = $i.' '.t('Day');
		}

		$def = _wlm_get_default();

		$def['label'] = $line['label'];

		$values = unserialize($line['action']);
		foreach ($values as $key => $value) {
			$def[$key] = $value;
		}

		$form_values['times']['*'] = t('All');
		for ($i = 0; $i < 24; $i++) {
			if ($i < 10) {
				$form_values['times']['0'.$i] = '0'.$i.':00';
			} else {
				$form_values['times'][$i] = $i.':00';
			}
		}

		$form_values['chk_opt'] = array('0' => t('And'), '1' => t('Or'));

		$form_values['limits'] = array(25 => 25, 50 => 50, 100 => 100, 250 => 250, 500 => 500, 1000 => 1000);

		$form_values['orderby']['ASC'] = t('ASC');	$form_values['orderby']['DESC'] = t('DESC');
		$form_values['format'] = array(t("Wrap On"), t("Wrap Off"), t("Text Mode"));

		$form['desc'] = array(
			'#type' => 'fieldset',
			'#title' => t('Label').':',
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#prefix' => '<div id="wlm-label">',
			'#suffix' => '</div>',
		);
		$form['desc']['label'] = array(
			'#type' => 'textfield',
			'#default_value' => $def['label'],
			'#size' => 60,
			'#maxlength' => 128,
			'#required' => TRUE,
		);

		$form = array_merge($form, _wlm_get_form($form_values, $def));

		$form['wid'] = array(
			'#type' => 'value',
			'#value' => $wid,
		);

		if (user_access('administer wlm')) {
			$form['other']['public'] = array(
				'#type' => 'select',
				'#title' => t('Public'),
				'#default_value' => $line['public'],
				'#options' => array( t('No'), t('Yes') ),
				'#prefix' => '<div class="wlm-left">',
				'#suffix' => '</div>',
			);
		}
		$form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

		return $form;
	} else {
		drupal_access_denied();
	}
} // function wlm_template_edit()


/**
 * wlm_template_edit_submit: Kereses sablon modositas adatbazisba irasa
 */
function wlm_template_edit_submit($form, &$form_state) {
	global $user;

	$def = _wlm_get_default();
	$keys = array("host", "facility", "priority", "date", "date2", "time", "time2",
								"msg1_not", "msg1", "msg2_op", "msg2_not", "msg2", "msg3_op", "msg3_not", "msg3",
								"limit", "orderby", "format");
	foreach ($keys as $key) {
		if ($def[$key] != $form_state['values'][$key]) {
			$action[$key] = $form_state['values'][$key];
		}
	}

	if (user_access('administer wlm')) {
		db_update('wlm_search_template')
		  ->fields(array(
		    'label' => $form_state['values']['label'],
		    'action' => serialize($action),
		    'public' => $form_state['values']['public'],
		  ))
		  ->condition('wid', $form_state['values']['wid'])
		  ->execute();
	} else {
		db_update('wlm_search_template')
		  ->fields(array(
		    'label' => $form_state['values']['label'],
		    'action' => serialize($action),
		    'public' => $form_state['values']['public'],
		  ))
		  ->condition('uid', $user->uid)
		  ->condition('wid', $form_state['values']['wid'])
		  ->execute();
	}

	$form_state['redirect'] = 'wlm/template';
}  // function wlm_template_edit_submit()

/**
 * wlm_template_delete_confirm: Kereses sablon torles megerositese
 * @param $wid template id
 */
function wlm_template_delete_confirm($form, &$form_state, $wid) {
	global $user;

	if (user_access('administer wlm')) {
		$query = db_select('wlm_search_template', 'w');
		$query
		  ->fields('w', array('wid', 'label'))
		  ->condition('wid', $wid);
		$result = $query->execute();
	} else {
		$query = db_select('wlm_search_template', 'w');
		$query
		  ->fields('w', array('wid', 'label'))
		  ->condition('uid', $user->uid)
		  ->condition('wid', $wid);
		$result = $query->execute();
	}

	if ($row = $result->fetchAssoc()) {
		$form['wid'] = array('#type' => 'value', '#value' => $wid);

		return confirm_form($form, t('Are you sure you want to delete %title?', array('%title' => $row['label']) ),
			'wlm/template', t('This action cannot be undone.'), t('Delete'), t('Cancel') );
	}

	drupal_access_denied();
} // function wlm_template_delete_confirm()

/**
 * wlm_template_delete_confirm_submit: Kereses sablon torles megerositve
 */
function wlm_template_delete_confirm_submit($form, &$form_state) {
	db_delete('wlm_search_template')
   	->condition('wid', $form_state['values']['wid'])
   	->execute();

	$form_state['redirect'] = 'wlm/template';
} // function wlm_template_delete_confirm_submit()


/**
 * wlm_oldlogsearch: kereses a regi logokban
 */
function wlm_oldlogsearch() {

	// Kapcsolodas az SQL szerverhez
	db_set_active('wlm');

	$SQL = "SHOW TABLES LIKE 'cache%'";
	$result = db_query($SQL);

	// Vissza valtas az alapertelmezett SQL szerverhez
	db_set_active();

	$old_db = array();

	while ($row = $result->fetchAssoc()) {
		$old = substr(reset($row), 6);

		if ( !empty($old) ) {
			$old_db[] = $old;
		}
	}
	array_multisort($old_db, SORT_DESC);

	$build['wlm_oldlogsearch'] = array(
		'#theme' => 'wlm_oldlogsearch',
		'#dbs' => $old_db,
	);
	return $build;
} // function wlm_oldlogsearch()


/**
 * wlm_oldlogsearch: kereses a regi logokban
 */
function theme_wlm_oldlogsearch($variables) {
	$dbs = $variables['dbs'];
	$output = '<ul>';

	foreach ($dbs as $db) {
		$output .= '<li>'.l(str_replace('_', '-', $db), 'wlm/oldlogsearch/'.$db).'</li>';
	}
	$output .= '</ul>';

	return $output;
}

/**
 * wlm_oldlogsearch: kereses a regi logokban
 */
function wlm_oldlogsearch_form($form, &$form_state, $db_name) {

	$links = func_get_args();
	array_shift($links);
	array_shift($links);

	if ($db_name) {

		// Kapcsolodas az SQL szerverhez
		db_set_active('wlm');

		$query = db_select('cache_'.$db_name, 'c');
		$query
		  ->fields('c')
		  ->orderBy('value', 'ASC');
		$result = $query->execute();

		// Vissza valtas az alapertelmezett SQL szerverhez
		db_set_active();

		$form_values['host']['*'] = $form_values['facility']['*'] = t('All');
		$form_values['priority']['*'] = $form_values['date']['*'] = t('All');

		foreach ($result as $row) {
			$form_values[$row->id][$row->value] = $row->value;
		}
		array_multisort($form_values['date'], SORT_DESC);

		$def = _wlm_get_default($links);

		$form_values['times']['*'] = t('All');
		for ($i = 0; $i < 24; $i++) {
			if ($i < 10) {
				$form_values['times']['0'.$i] = '0'.$i.':00';
			} else {
				$form_values['times'][$i] = $i.':00';
			}
		}

		$form_values['chk_opt'] = array('0' => t('And'), '1' => t('Or'));

		$form_values['limits'] = array(25 => 25, 50 => 50, 100 => 100, 250 => 250, 500 => 500, 1000 => 1000);

		$form_values['orderby']['ASC'] = t('ASC');	$form_values['orderby']['DESC'] = t('DESC');
		$form_values['format'] = array(t("Wrap On"), t("Wrap Off"), t("Text Mode"));

		$form = _wlm_get_form($form_values, $def);
		$form['db_name'] = array(
			'#type' => 'value',
			'#value' => $db_name,
		);
		$form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

		return $form;
	}

	drupal_goto('wlm/oldlogsearch');
} // function wlm_oldlogsearch()

/**
 * wlm_oldlogsearch_form_submit
 */
function wlm_oldlogsearch_form_submit($form, &$form_state) {
		$def = _wlm_get_default();
		$form_state['redirect'] = 'wlm/oldlog/'.$form_state['values']['db_name']._wlm_get_link($def, $form_state['values']);
} // function wlm_oldlogsearch_form_submit()

/**
 * wlm_oldlog: kereses a regi logban
 */
function wlm_oldlog() {
	$links = func_get_args();
	$action = _wlm_get_default($links);
	$db_name = $links[0];

	if ($db_name && $action['host'] != '' && count($links) ) {

		$bc = drupal_get_breadcrumb();
		$bc[] = l( t('Old Logs Search'), 'wlm/oldlogsearch' );
		$bc[] = l( t('Search'), 'wlm/oldlogsearch/'.substr($_GET['q'], 11) );
		drupal_set_breadcrumb($bc);

		$result = _wlm_url2sql($action, 'logs_'.$db_name);

		foreach ($result as $row) {
			$rows[] = array(
				array('data' => $row->seq, 'class' => 'wlm_seq'),
				array('data' => $row->host, 'class' => 'wlm_host'),
				array('data' => $row->priority, 'class' => 'wlm_priority_'.$row->priority),
				array('data' => $row->date.' '.$row->time, 'class' => 'wlm_date'),
				array('data' => $row->facility, 'class' => 'wlm_facility'),
				array('data' => htmlspecialchars($row->msg, ENT_QUOTES, 'UTF-8'), 'class' => 'wlm_msg'.$action['format']),
			);
		}

		$build['wlm_oldlog'] = array(
		  '#theme' => 'wlm_log',
		  '#rows' => $rows,
		  '#log_per_page' => $action['limit'],
		  '#format' => $action['format'],
		);
		return $build;
	}

	drupal_goto('wlm/oldlogsearch');
}  // function wlm_oldlog()
